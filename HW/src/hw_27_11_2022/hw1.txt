First level:  1) Вычислить сложность следующих алгоритмов
1.1) 
void test1(int n)
 {
    if (n==1) 
       return;
    for (int i=1; i<=n; i++)
        for (int j=1; j<=n; j++)
            System.out.println("*");
            break;
}
O(n)
--------------------------
1.2)
void test2(int n)
 {
    if (n==1) 
       return;
    for (int i=1; i<=n; i++)
        for (int j=1; j<=n; j++)
            System.out.println("*");
}
O(n^2)
----------------------------
1.3)
void test3(int n)
{
    int a = 0;
    for (i = 0; i < n; i++)
        for (j = n; j > i; j--)
        a = a + i + j;

}
O(n*(n+1)/2)
------------------------------
1.4)
void test4(int n)
{
    int i, j, a = 0;
    for (i = n/2; i <=n; i++)
        for (j = 2; j <=n; j=j*2)
        a=a+n/2;

}
O((n/2+1)*(log n по осн.2))
---------------------------------
2)
Find the element that appears once in a sorted array
Given a sorted array in which all elements occur twice
(one after the other) and one element appears only once.


Простое решение состоит в обходе массива слева направо. Поскольку массив
отсортирован, мы легко можем найти нужный элемент.

Если в этой задаче имеется ввиду вычислить сложность тогда O(N)
---------------------------------
Задачки со звёздочкой - вычислить сложность в лучшем и худшем случае.
3)
void test5(int n)
 {
    int a = 0, i = n;
    while (i > 0) {
        a += i;
        i /= 2;
}
}
В лучшем случае O(1) в худшем O(log n)
--------------------------------
void method(int a, int b) {
        while (a != b) {
            if (a > b) {
                a = a - b;
            } else {
                b = b - a;
            }
        }
    }
В лучшем случае O(1) в худшем если a>b O(n*a/b), если b>a O(n*b/a)
--------------------------------------
void method2(int n) {
        for (int i = 0; i < n / 2; i++) {
            for (int j = 1; j + n / 2 <= n; j++) {
                for (int k = 1; k <= n; k = k * 2) {
                    System.out.println("I am expert!");
                }
            }
        }
    }
В лучшем случае O(1) в худшем O(n/2*n*log n по осн. 2)
--------------------------------------------
void method3(int n) {
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j = j + i) {
                System.out.println("I am expert!");
            }
        }
    }
????????????